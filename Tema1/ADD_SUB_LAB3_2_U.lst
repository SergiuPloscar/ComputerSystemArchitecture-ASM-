     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  ; the start label will be the entry point in the program
     3                                  global  start 
     4                                  
     5                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     6                                  
     7                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  segment  data use32 class=data ; the data segment where the variables are declared 
    10 00000000 09                      	a  db 9h    ;9
    11 00000001 3901                    	b  dw 139h  ;313
    12 00000003 E8030000                    c  dd 3E8h  ;1000
    13 00000007 4E02000000000000            d  dq 24Eh  ;590
    14                                      ;(c-d-a)+(b+b)-(c+a)  / (1000-590-9)+(313+313)-(1000+9)= 401 + 626 - 1009 = 18 = 0012h
    15                                  segment  code use32 class=code ; code segment
    16                                  start: 
    17 00000000 BA00000000              mov EDX,0h              ;EDX = 0000 0000
    18 00000005 A1[03000000]            mov EAX,[c]             ;EAX = 0000 03E8
    19 0000000A 8B0D[07000000]          mov ECX,dword [d]       ;ECX = 0000 024E   
    20 00000010 8B1D[0B000000]          mov EBX,dword [d+4]     ;EBX = 0000 0000
    21 00000016 29C8                    sub EAX,ECX             ;EAX = 0000 019A
    22 00000018 19DA                    sbb EDX,EBX             ;EDX = 0000 0000   / EDX:EAX = c-d 
    23 0000001A F8                      clc                     ;just to make sure
    24 0000001B B900000000              mov ECX,0h              ;ECX = 0000 0000
    25 00000020 8A0D[00000000]          mov CL,[a]              ;ECX = 0000 0009
    26 00000026 29C8                    sub EAX,ECX             ;EAX = 0000 0191   / EDX:EAX = c-d-a
    27 00000028 7301                    jnc here                ;We take away any remaining borrow 
    28 0000002A 4A                      dec EDX
    29                                  here:
    30 0000002B F8                      clc
    31 0000002C B900000000              mov ECX,0h              ;ECX = 0000 0000
    32 00000031 BB00000000              mov EBX,0h              ;EBX = 0000 0000
    33 00000036 668B0D[01000000]        mov CX,[b]              ;ECX = 0000 0139
    34 0000003D 66030D[01000000]        add CX,[b]              ;ECX = 0000 0272  / ECX = b+b
    35 00000044 7301                    jnc here2               ;We add any remaining carry
    36 00000046 43                      inc EBX
    37                                  here2:
    38 00000047 F8                      clc                     ;After all this EBX:ECX = b+b
    39 00000048 01C8                    add EAX,ECX             ;EAX = 0000 0403
    40 0000004A 11DA                    adc EDX,EBX             ;EDX = 0000 0000  / EDX:EAX = (c-d-a)+(b+b)
    41 0000004C 8B0D[03000000]          mov ECX,[c]             ;ECX = 0000 03E8
    42 00000052 BB00000000              mov EBX,0h              ;EBX = 0000 0000
    43 00000057 8A1D[00000000]          mov BL,[a]              ;EBX = 0000 0009
    44 0000005D 01D9                    add ECX,EBX             ;ECX = 0000 03F1  / ECX = c+a
    45 0000005F BB00000000              mov EBX,0h              ;EBX = 0000 0000
    46 00000064 7301                    jnc here3               ;We add any remaining carry
    47 00000066 43                      inc EBX                 
    48                                  here3:
    49 00000067 F8                      clc                     ;After all this EBX:ECX = c+a
    50 00000068 29C8                    sub EAX,ECX             ;EAX = 0000 0012 
    51 0000006A 19DA                    sbb EDX,EBX             ;EDX = 0000 0000
    52                                                          ;Our result is given by EDX:EAX which holds (c-d-a) + (b+b) - (c+a)
